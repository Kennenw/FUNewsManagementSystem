@model ReportViewModel
<h2>News Report</h2>
<form asp-action="Index" method="post" id="reportForm">
    <div class="mb-3">
        <label class="form-label">Start Date</label>
        <input asp-for="StartDate" type="date" class="form-control" required
               min="@DateTime.Today.AddYears(-10).ToString("yyyy-MM-dd")"
               max="@DateTime.Today.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="StartDate" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label class="form-label">End Date (optional, defaults to today)</label>
        <input asp-for="EndDate" type="date" class="form-control"
               min="@DateTime.Today.AddYears(-10).ToString("yyyy-MM-dd")"
               max="@DateTime.Today.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="EndDate" class="text-danger"></span>
    </div>
    <button type="submit" class="btn btn-primary">Generate Report</button>
</form>

@if (Model.NewsItems.Any())
{
    <h3 class="mt-4">Report from @Model.StartDate.ToString("yyyy-MM-dd") to @Model.EndDate.ToString("yyyy-MM-dd")</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Category</th>
                <th>Author</th>
                <th>Created Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.NewsItems.OrderByDescending(x => x.CreatedDate))
            {
                <tr>
                    <td>@item.Title</td>
                    <td>@item.CategoryName</td>
                    <td>@item.AuthorName</td>
                    <td>@item.CreatedDate</td>
                </tr>
            }
        </tbody>
    </table>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.getElementById('reportForm').addEventListener('submit', function (e) {
            const startDate = new Date(document.getElementById('StartDate').value);
            const endDateInput = document.getElementById('EndDate');
            const endDate = endDateInput.value ? new Date(endDateInput.value) : new Date();
            const today = new Date('@DateTime.Today.ToString("yyyy-MM-dd")');
            const minDate = new Date('@DateTime.Today.AddYears(-10).ToString("yyyy-MM-dd")');

            if (startDate < minDate) {
                e.preventDefault();
                alert('Start Date cannot be earlier than @DateTime.Today.AddYears(-10).ToString("yyyy-MM-dd").');
                return;
            }

            if (startDate > endDate) {
                e.preventDefault();
                alert('Start Date must be before or equal to End Date.');
                return;
            }

            if (endDate > today) {
                e.preventDefault();
                alert('End Date cannot be later than today (@DateTime.Today.ToString("yyyy-MM-dd")).');
                endDateInput.value = '@DateTime.Today.ToString("yyyy-MM-dd")';
                return;
            }
        });
    </script>
}